{"code":"\"use strict\";function quickElement(){const t=document.createElement(arguments[0]);if(arguments[2]){const e=document.createTextNode(arguments[2]);t.appendChild(e)}const e=arguments.length;for(let i=3;i<e;i+=2)t.setAttribute(arguments[i],arguments[i+1]);return arguments[1].appendChild(t),t}function removeChildren(t){while(t.hasChildNodes())t.removeChild(t.lastChild)}function findPosX(t){let e=0;if(t.offsetParent)while(t.offsetParent)e+=t.offsetLeft-t.scrollLeft,t=t.offsetParent;else t.x&&(e+=t.x);return e}function findPosY(t){let e=0;if(t.offsetParent)while(t.offsetParent)e+=t.offsetTop-t.scrollTop,t=t.offsetParent;else t.y&&(e+=t.y);return e}Date.prototype.getTwelveHours=function(){return this.getHours()%12||12},Date.prototype.getTwoDigitMonth=function(){return this.getMonth()<9?\"0\"+(this.getMonth()+1):this.getMonth()+1},Date.prototype.getTwoDigitDate=function(){return this.getDate()<10?\"0\"+this.getDate():this.getDate()},Date.prototype.getTwoDigitTwelveHour=function(){return this.getTwelveHours()<10?\"0\"+this.getTwelveHours():this.getTwelveHours()},Date.prototype.getTwoDigitHour=function(){return this.getHours()<10?\"0\"+this.getHours():this.getHours()},Date.prototype.getTwoDigitMinute=function(){return this.getMinutes()<10?\"0\"+this.getMinutes():this.getMinutes()},Date.prototype.getTwoDigitSecond=function(){return this.getSeconds()<10?\"0\"+this.getSeconds():this.getSeconds()},Date.prototype.getFullMonthName=function(){return\"undefined\"===typeof window.CalendarNamespace?this.getTwoDigitMonth():window.CalendarNamespace.monthsOfYear[this.getMonth()]},Date.prototype.strftime=function(t){const e={B:this.getFullMonthName(),c:this.toString(),d:this.getTwoDigitDate(),H:this.getTwoDigitHour(),I:this.getTwoDigitTwelveHour(),m:this.getTwoDigitMonth(),M:this.getTwoDigitMinute(),p:this.getHours()>=12?\"PM\":\"AM\",S:this.getTwoDigitSecond(),w:\"0\"+this.getDay(),x:this.toLocaleDateString(),X:this.toLocaleTimeString(),y:(\"\"+this.getFullYear()).substr(2,4),Y:\"\"+this.getFullYear(),\"%\":\"%\"};let i=\"\",o=0;while(o<t.length)\"%\"===t.charAt(o)?(i+=e[t.charAt(o+1)],++o):i+=t.charAt(o),++o;return i},String.prototype.strptime=function(t){const e=t.split(/[.\\-/]/),i=this.split(/[.\\-/]/);let o,n,s,r=0;while(r<e.length){switch(e[r]){case\"%d\":o=i[r];break;case\"%m\":n=i[r]-1;break;case\"%Y\":s=i[r];break;case\"%y\":s=parseInt(i[r],10)>=69?i[r]:new Date(Date.UTC(i[r],0)).getUTCFullYear()+100;break}++r}return new Date(Date.UTC(s,n,o))};","name":"fabrikauth/admin/js/core.js","input":"// Core javascript helper functions\n'use strict';\n\n// quickElement(tagType, parentReference [, textInChildNode, attribute, attributeValue ...]);\nfunction quickElement() {\n    const obj = document.createElement(arguments[0]);\n    if (arguments[2]) {\n        const textNode = document.createTextNode(arguments[2]);\n        obj.appendChild(textNode);\n    }\n    const len = arguments.length;\n    for (let i = 3; i < len; i += 2) {\n        obj.setAttribute(arguments[i], arguments[i + 1]);\n    }\n    arguments[1].appendChild(obj);\n    return obj;\n}\n\n// \"a\" is reference to an object\nfunction removeChildren(a) {\n    while (a.hasChildNodes()) {\n        a.removeChild(a.lastChild);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Find-position functions by PPK\n// See https://www.quirksmode.org/js/findpos.html\n// ----------------------------------------------------------------------------\nfunction findPosX(obj) {\n    let curleft = 0;\n    if (obj.offsetParent) {\n        while (obj.offsetParent) {\n            curleft += obj.offsetLeft - obj.scrollLeft;\n            obj = obj.offsetParent;\n        }\n    } else if (obj.x) {\n        curleft += obj.x;\n    }\n    return curleft;\n}\n\nfunction findPosY(obj) {\n    let curtop = 0;\n    if (obj.offsetParent) {\n        while (obj.offsetParent) {\n            curtop += obj.offsetTop - obj.scrollTop;\n            obj = obj.offsetParent;\n        }\n    } else if (obj.y) {\n        curtop += obj.y;\n    }\n    return curtop;\n}\n\n//-----------------------------------------------------------------------------\n// Date object extensions\n// ----------------------------------------------------------------------------\n{\n    Date.prototype.getTwelveHours = function() {\n        return this.getHours() % 12 || 12;\n    };\n\n    Date.prototype.getTwoDigitMonth = function() {\n        return (this.getMonth() < 9) ? '0' + (this.getMonth() + 1) : (this.getMonth() + 1);\n    };\n\n    Date.prototype.getTwoDigitDate = function() {\n        return (this.getDate() < 10) ? '0' + this.getDate() : this.getDate();\n    };\n\n    Date.prototype.getTwoDigitTwelveHour = function() {\n        return (this.getTwelveHours() < 10) ? '0' + this.getTwelveHours() : this.getTwelveHours();\n    };\n\n    Date.prototype.getTwoDigitHour = function() {\n        return (this.getHours() < 10) ? '0' + this.getHours() : this.getHours();\n    };\n\n    Date.prototype.getTwoDigitMinute = function() {\n        return (this.getMinutes() < 10) ? '0' + this.getMinutes() : this.getMinutes();\n    };\n\n    Date.prototype.getTwoDigitSecond = function() {\n        return (this.getSeconds() < 10) ? '0' + this.getSeconds() : this.getSeconds();\n    };\n\n    Date.prototype.getFullMonthName = function() {\n        return typeof window.CalendarNamespace === \"undefined\"\n            ? this.getTwoDigitMonth()\n            : window.CalendarNamespace.monthsOfYear[this.getMonth()];\n    };\n\n    Date.prototype.strftime = function(format) {\n        const fields = {\n            B: this.getFullMonthName(),\n            c: this.toString(),\n            d: this.getTwoDigitDate(),\n            H: this.getTwoDigitHour(),\n            I: this.getTwoDigitTwelveHour(),\n            m: this.getTwoDigitMonth(),\n            M: this.getTwoDigitMinute(),\n            p: (this.getHours() >= 12) ? 'PM' : 'AM',\n            S: this.getTwoDigitSecond(),\n            w: '0' + this.getDay(),\n            x: this.toLocaleDateString(),\n            X: this.toLocaleTimeString(),\n            y: ('' + this.getFullYear()).substr(2, 4),\n            Y: '' + this.getFullYear(),\n            '%': '%'\n        };\n        let result = '', i = 0;\n        while (i < format.length) {\n            if (format.charAt(i) === '%') {\n                result = result + fields[format.charAt(i + 1)];\n                ++i;\n            }\n            else {\n                result = result + format.charAt(i);\n            }\n            ++i;\n        }\n        return result;\n    };\n\n    // ----------------------------------------------------------------------------\n    // String object extensions\n    // ----------------------------------------------------------------------------\n    String.prototype.strptime = function(format) {\n        const split_format = format.split(/[.\\-/]/);\n        const date = this.split(/[.\\-/]/);\n        let i = 0;\n        let day, month, year;\n        while (i < split_format.length) {\n            switch (split_format[i]) {\n            case \"%d\":\n                day = date[i];\n                break;\n            case \"%m\":\n                month = date[i] - 1;\n                break;\n            case \"%Y\":\n                year = date[i];\n                break;\n            case \"%y\":\n                // A %y value in the range of [00, 68] is in the current\n                // century, while [69, 99] is in the previous century,\n                // according to the Open Group Specification.\n                if (parseInt(date[i], 10) >= 69) {\n                    year = date[i];\n                } else {\n                    year = (new Date(Date.UTC(date[i], 0))).getUTCFullYear() + 100;\n                }\n                break;\n            }\n            ++i;\n        }\n        // Create Date object from UTC since the parsed value is supposed to be\n        // in UTC, not local time. Also, the calendar uses UTC functions for\n        // date extraction.\n        return new Date(Date.UTC(year, month, day));\n    };\n}\n","inputSourceMap":null}