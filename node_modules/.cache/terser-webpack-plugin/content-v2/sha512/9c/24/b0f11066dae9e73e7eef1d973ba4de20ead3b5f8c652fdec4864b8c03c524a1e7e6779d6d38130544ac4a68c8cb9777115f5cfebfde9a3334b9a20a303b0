{"code":"\"use strict\";{const e=django.jQuery;e.fn.formset=function(t){const n=e.extend({},e.fn.formset.defaults,t),s=e(this),i=s.parent(),a=function(t,n,s){const i=new RegExp(\"(\"+n+\"-(\\\\d+|__prefix__))\"),a=n+\"-\"+s;e(t).prop(\"for\")&&e(t).prop(\"for\",e(t).prop(\"for\").replace(i,a)),t.id&&(t.id=t.id.replace(i,a)),t.name&&(t.name=t.name.replace(i,a))},l=e(\"#id_\"+n.prefix+\"-TOTAL_FORMS\").prop(\"autocomplete\",\"off\");let d=parseInt(l.val(),10);const o=e(\"#id_\"+n.prefix+\"-MAX_NUM_FORMS\").prop(\"autocomplete\",\"off\"),r=e(\"#id_\"+n.prefix+\"-MIN_NUM_FORMS\").prop(\"autocomplete\",\"off\");let f;const c=function(){if(null===f)if(\"TR\"===s.prop(\"tagName\")){const e=s.eq(-1).children().length;i.append('<tr class=\"'+n.addCssClass+'\"><td colspan=\"'+e+'\"><a href=\"#\">'+n.addText+\"</a></tr>\"),f=i.find(\"tr:last a\")}else s.filter(\":last\").after('<div class=\"'+n.addCssClass+'\"><a href=\"#\">'+n.addText+\"</a></div>\"),f=s.filter(\":last\").next().find(\"a\");f.on(\"click\",p)},p=function(t){t.preventDefault();const s=e(\"#\"+n.prefix+\"-empty\"),i=s.clone(!0);i.removeClass(n.emptyCssClass).addClass(n.formCssClass).attr(\"id\",n.prefix+\"-\"+d),u(i),i.find(\"*\").each((function(){a(this,n.prefix,l.val())})),i.insertBefore(e(s)),e(l).val(parseInt(l.val(),10)+1),d+=1,\"\"!==o.val()&&o.val()-l.val()<=0&&f.parent().hide(),h(i.closest(\".inline-group\")),n.added&&n.added(i),e(document).trigger(\"formset:added\",[i,n.prefix])},u=function(e){e.is(\"tr\")?e.children(\":last\").append('<div><a class=\"'+n.deleteCssClass+'\" href=\"#\">'+n.deleteText+\"</a></div>\"):e.is(\"ul\")||e.is(\"ol\")?e.append('<li><a class=\"'+n.deleteCssClass+'\" href=\"#\">'+n.deleteText+\"</a></li>\"):e.children(\":first\").append('<span><a class=\"'+n.deleteCssClass+'\" href=\"#\">'+n.deleteText+\"</a></span>\"),e.find(\"a.\"+n.deleteCssClass).on(\"click\",m.bind(this))},m=function(t){t.preventDefault();const s=e(t.target),i=s.closest(\".\"+n.formCssClass),l=i.closest(\".inline-group\"),r=i.prev();r.length&&r.hasClass(\"row-form-errors\")&&r.remove(),i.remove(),d-=1,n.removed&&n.removed(i),e(document).trigger(\"formset:removed\",[i,n.prefix]);const c=e(\".\"+n.formCssClass);let p,u;e(\"#id_\"+n.prefix+\"-TOTAL_FORMS\").val(c.length),(\"\"===o.val()||o.val()-c.length>0)&&f.parent().show(),h(l);const m=function(){a(this,n.prefix,p)};for(p=0,u=c.length;p<u;p++)a(e(c).get(p),n.prefix,p),e(c.get(p)).find(\"*\").each(m)},h=function(e){\"\"!==r.val()&&r.val()-l.val()>=0?e.find(\".inline-deletelink\").hide():e.find(\".inline-deletelink\").show()};s.each((function(t){e(this).not(\".\"+n.emptyCssClass).addClass(n.formCssClass)})),s.filter(\".\"+n.formCssClass+\":not(.has_original):not(.\"+n.emptyCssClass+\")\").each((function(){u(e(this))})),h(s),f=n.addButton,c();const C=\"\"===o.val()||o.val()-l.val()>0;return s.length&&C?f.parent().show():f.parent().hide(),this},e.fn.formset.defaults={prefix:\"form\",addText:\"add another\",deleteText:\"remove\",addCssClass:\"add-row\",deleteCssClass:\"delete-row\",emptyCssClass:\"empty-row\",formCssClass:\"dynamic-form\",added:null,removed:null,addButton:null},e.fn.tabularFormset=function(t,n){const s=e(this),i=function(){\"undefined\"!==typeof DateTimeShortcuts&&(e(\".datetimeshortcuts\").remove(),DateTimeShortcuts.init())},a=function(){\"undefined\"!==typeof SelectFilter&&(e(\".selectfilter\").each((function(e,t){const n=t.name.split(\"-\");SelectFilter.init(t.id,n[n.length-1],!1)})),e(\".selectfilterstacked\").each((function(e,t){const n=t.name.split(\"-\");SelectFilter.init(t.id,n[n.length-1],!0)})))},l=function(t){t.find(\".prepopulated_field\").each((function(){const n=e(this),s=n.find(\"input, select, textarea\"),i=s.data(\"dependency_list\")||[],a=[];e.each(i,(function(e,n){a.push(\"#\"+t.find(\".field-\"+n).find(\"input, select, textarea\").attr(\"id\"))})),a.length&&s.prepopulate(a,s.attr(\"maxlength\"))}))};return s.formset({prefix:n.prefix,addText:n.addText,formCssClass:\"dynamic-\"+n.prefix,deleteCssClass:\"inline-deletelink\",deleteText:n.deleteText,emptyCssClass:\"empty-form\",added:function(e){l(e),i(),a()},addButton:n.addButton}),s},e.fn.stackedFormset=function(t,n){const s=e(this),i=function(n){e(t).find(\".inline_label\").each((function(t){const n=t+1;e(this).html(e(this).html().replace(/(#\\d+)/g,\"#\"+n))}))},a=function(){\"undefined\"!==typeof DateTimeShortcuts&&(e(\".datetimeshortcuts\").remove(),DateTimeShortcuts.init())},l=function(){\"undefined\"!==typeof SelectFilter&&(e(\".selectfilter\").each((function(e,t){const n=t.name.split(\"-\");SelectFilter.init(t.id,n[n.length-1],!1)})),e(\".selectfilterstacked\").each((function(e,t){const n=t.name.split(\"-\");SelectFilter.init(t.id,n[n.length-1],!0)})))},d=function(t){t.find(\".prepopulated_field\").each((function(){const n=e(this),s=n.find(\"input, select, textarea\"),i=s.data(\"dependency_list\")||[],a=[];e.each(i,(function(e,n){a.push(\"#\"+t.find(\".form-row .field-\"+n).find(\"input, select, textarea\").attr(\"id\"))})),a.length&&s.prepopulate(a,s.attr(\"maxlength\"))}))};return s.formset({prefix:n.prefix,addText:n.addText,formCssClass:\"dynamic-\"+n.prefix,deleteCssClass:\"inline-deletelink\",deleteText:n.deleteText,emptyCssClass:\"empty-form\",removed:i,added:function(e){d(e),a(),l(),i(e)},addButton:n.addButton}),s},e(document).ready((function(){e(\".js-inline-admin-formset\").each((function(){const t=e(this).data(),n=t.inlineFormset;let s;switch(t.inlineType){case\"stacked\":s=n.name+\"-group .inline-related\",e(s).stackedFormset(s,n.options);break;case\"tabular\":s=n.name+\"-group .tabular.inline-related tbody:first > tr.form-row\",e(s).tabularFormset(s,n.options);break}}))}))}","name":"fabrikauth/admin/js/inlines.js","input":"/*global DateTimeShortcuts, SelectFilter*/\n/**\n * Django admin inlines\n *\n * Based on jQuery Formset 1.1\n * @author Stanislaus Madueke (stan DOT madueke AT gmail DOT com)\n * @requires jQuery 1.2.6 or later\n *\n * Copyright (c) 2009, Stanislaus Madueke\n * All rights reserved.\n *\n * Spiced up with Code from Zain Memon's GSoC project 2009\n * and modified for Django by Jannis Leidel, Travis Swicegood and Julien Phalip.\n *\n * Licensed under the New BSD License\n * See: https://opensource.org/licenses/bsd-license.php\n */\n'use strict';\n{\n    const $ = django.jQuery;\n    $.fn.formset = function(opts) {\n        const options = $.extend({}, $.fn.formset.defaults, opts);\n        const $this = $(this);\n        const $parent = $this.parent();\n        const updateElementIndex = function(el, prefix, ndx) {\n            const id_regex = new RegExp(\"(\" + prefix + \"-(\\\\d+|__prefix__))\");\n            const replacement = prefix + \"-\" + ndx;\n            if ($(el).prop(\"for\")) {\n                $(el).prop(\"for\", $(el).prop(\"for\").replace(id_regex, replacement));\n            }\n            if (el.id) {\n                el.id = el.id.replace(id_regex, replacement);\n            }\n            if (el.name) {\n                el.name = el.name.replace(id_regex, replacement);\n            }\n        };\n        const totalForms = $(\"#id_\" + options.prefix + \"-TOTAL_FORMS\").prop(\"autocomplete\", \"off\");\n        let nextIndex = parseInt(totalForms.val(), 10);\n        const maxForms = $(\"#id_\" + options.prefix + \"-MAX_NUM_FORMS\").prop(\"autocomplete\", \"off\");\n        const minForms = $(\"#id_\" + options.prefix + \"-MIN_NUM_FORMS\").prop(\"autocomplete\", \"off\");\n        let addButton;\n\n        /**\n         * The \"Add another MyModel\" button below the inline forms.\n         */\n        const addInlineAddButton = function() {\n            if (addButton === null) {\n                if ($this.prop(\"tagName\") === \"TR\") {\n                    // If forms are laid out as table rows, insert the\n                    // \"add\" button in a new table row:\n                    const numCols = $this.eq(-1).children().length;\n                    $parent.append('<tr class=\"' + options.addCssClass + '\"><td colspan=\"' + numCols + '\"><a href=\"#\">' + options.addText + \"</a></tr>\");\n                    addButton = $parent.find(\"tr:last a\");\n                } else {\n                    // Otherwise, insert it immediately after the last form:\n                    $this.filter(\":last\").after('<div class=\"' + options.addCssClass + '\"><a href=\"#\">' + options.addText + \"</a></div>\");\n                    addButton = $this.filter(\":last\").next().find(\"a\");\n                }\n            }\n            addButton.on('click', addInlineClickHandler);\n        };\n\n        const addInlineClickHandler = function(e) {\n            e.preventDefault();\n            const template = $(\"#\" + options.prefix + \"-empty\");\n            const row = template.clone(true);\n            row.removeClass(options.emptyCssClass)\n                .addClass(options.formCssClass)\n                .attr(\"id\", options.prefix + \"-\" + nextIndex);\n            addInlineDeleteButton(row);\n            row.find(\"*\").each(function() {\n                updateElementIndex(this, options.prefix, totalForms.val());\n            });\n            // Insert the new form when it has been fully edited.\n            row.insertBefore($(template));\n            // Update number of total forms.\n            $(totalForms).val(parseInt(totalForms.val(), 10) + 1);\n            nextIndex += 1;\n            // Hide the add button if there's a limit and it's been reached.\n            if ((maxForms.val() !== '') && (maxForms.val() - totalForms.val()) <= 0) {\n                addButton.parent().hide();\n            }\n            // Show the remove buttons if there are more than min_num.\n            toggleDeleteButtonVisibility(row.closest('.inline-group'));\n\n            // Pass the new form to the post-add callback, if provided.\n            if (options.added) {\n                options.added(row);\n            }\n            $(document).trigger('formset:added', [row, options.prefix]);\n        };\n\n        /**\n         * The \"X\" button that is part of every unsaved inline.\n         * (When saved, it is replaced with a \"Delete\" checkbox.)\n         */\n        const addInlineDeleteButton = function(row) {\n            if (row.is(\"tr\")) {\n                // If the forms are laid out in table rows, insert\n                // the remove button into the last table cell:\n                row.children(\":last\").append('<div><a class=\"' + options.deleteCssClass + '\" href=\"#\">' + options.deleteText + \"</a></div>\");\n            } else if (row.is(\"ul\") || row.is(\"ol\")) {\n                // If they're laid out as an ordered/unordered list,\n                // insert an <li> after the last list item:\n                row.append('<li><a class=\"' + options.deleteCssClass + '\" href=\"#\">' + options.deleteText + \"</a></li>\");\n            } else {\n                // Otherwise, just insert the remove button as the\n                // last child element of the form's container:\n                row.children(\":first\").append('<span><a class=\"' + options.deleteCssClass + '\" href=\"#\">' + options.deleteText + \"</a></span>\");\n            }\n            // Add delete handler for each row.\n            row.find(\"a.\" + options.deleteCssClass).on('click', inlineDeleteHandler.bind(this));\n        };\n\n        const inlineDeleteHandler = function(e1) {\n            e1.preventDefault();\n            const deleteButton = $(e1.target);\n            const row = deleteButton.closest('.' + options.formCssClass);\n            const inlineGroup = row.closest('.inline-group');\n            // Remove the parent form containing this button,\n            // and also remove the relevant row with non-field errors:\n            const prevRow = row.prev();\n            if (prevRow.length && prevRow.hasClass('row-form-errors')) {\n                prevRow.remove();\n            }\n            row.remove();\n            nextIndex -= 1;\n            // Pass the deleted form to the post-delete callback, if provided.\n            if (options.removed) {\n                options.removed(row);\n            }\n            $(document).trigger('formset:removed', [row, options.prefix]);\n            // Update the TOTAL_FORMS form count.\n            const forms = $(\".\" + options.formCssClass);\n            $(\"#id_\" + options.prefix + \"-TOTAL_FORMS\").val(forms.length);\n            // Show add button again once below maximum number.\n            if ((maxForms.val() === '') || (maxForms.val() - forms.length) > 0) {\n                addButton.parent().show();\n            }\n            // Hide the remove buttons if at min_num.\n            toggleDeleteButtonVisibility(inlineGroup);\n            // Also, update names and ids for all remaining form controls so\n            // they remain in sequence:\n            let i, formCount;\n            const updateElementCallback = function() {\n                updateElementIndex(this, options.prefix, i);\n            };\n            for (i = 0, formCount = forms.length; i < formCount; i++) {\n                updateElementIndex($(forms).get(i), options.prefix, i);\n                $(forms.get(i)).find(\"*\").each(updateElementCallback);\n            }\n        };\n\n        const toggleDeleteButtonVisibility = function(inlineGroup) {\n            if ((minForms.val() !== '') && (minForms.val() - totalForms.val()) >= 0) {\n                inlineGroup.find('.inline-deletelink').hide();\n            } else {\n                inlineGroup.find('.inline-deletelink').show();\n            }\n        };\n\n        $this.each(function(i) {\n            $(this).not(\".\" + options.emptyCssClass).addClass(options.formCssClass);\n        });\n\n        // Create the delete buttons for all unsaved inlines:\n        $this.filter('.' + options.formCssClass + ':not(.has_original):not(.' + options.emptyCssClass + ')').each(function() {\n            addInlineDeleteButton($(this));\n        });\n        toggleDeleteButtonVisibility($this);\n\n        // Create the add button, initially hidden.\n        addButton = options.addButton;\n        addInlineAddButton();\n\n        // Show the add button if allowed to add more items.\n        // Note that max_num = None translates to a blank string.\n        const showAddButton = maxForms.val() === '' || (maxForms.val() - totalForms.val()) > 0;\n        if ($this.length && showAddButton) {\n            addButton.parent().show();\n        } else {\n            addButton.parent().hide();\n        }\n\n        return this;\n    };\n\n    /* Setup plugin defaults */\n    $.fn.formset.defaults = {\n        prefix: \"form\", // The form prefix for your django formset\n        addText: \"add another\", // Text for the add link\n        deleteText: \"remove\", // Text for the delete link\n        addCssClass: \"add-row\", // CSS class applied to the add link\n        deleteCssClass: \"delete-row\", // CSS class applied to the delete link\n        emptyCssClass: \"empty-row\", // CSS class applied to the empty row\n        formCssClass: \"dynamic-form\", // CSS class applied to each form in a formset\n        added: null, // Function called each time a new form is added\n        removed: null, // Function called each time a form is deleted\n        addButton: null // Existing add button to use\n    };\n\n\n    // Tabular inlines ---------------------------------------------------------\n    $.fn.tabularFormset = function(selector, options) {\n        const $rows = $(this);\n\n        const reinitDateTimeShortCuts = function() {\n            // Reinitialize the calendar and clock widgets by force\n            if (typeof DateTimeShortcuts !== \"undefined\") {\n                $(\".datetimeshortcuts\").remove();\n                DateTimeShortcuts.init();\n            }\n        };\n\n        const updateSelectFilter = function() {\n            // If any SelectFilter widgets are a part of the new form,\n            // instantiate a new SelectFilter instance for it.\n            if (typeof SelectFilter !== 'undefined') {\n                $('.selectfilter').each(function(index, value) {\n                    const namearr = value.name.split('-');\n                    SelectFilter.init(value.id, namearr[namearr.length - 1], false);\n                });\n                $('.selectfilterstacked').each(function(index, value) {\n                    const namearr = value.name.split('-');\n                    SelectFilter.init(value.id, namearr[namearr.length - 1], true);\n                });\n            }\n        };\n\n        const initPrepopulatedFields = function(row) {\n            row.find('.prepopulated_field').each(function() {\n                const field = $(this),\n                    input = field.find('input, select, textarea'),\n                    dependency_list = input.data('dependency_list') || [],\n                    dependencies = [];\n                $.each(dependency_list, function(i, field_name) {\n                    dependencies.push('#' + row.find('.field-' + field_name).find('input, select, textarea').attr('id'));\n                });\n                if (dependencies.length) {\n                    input.prepopulate(dependencies, input.attr('maxlength'));\n                }\n            });\n        };\n\n        $rows.formset({\n            prefix: options.prefix,\n            addText: options.addText,\n            formCssClass: \"dynamic-\" + options.prefix,\n            deleteCssClass: \"inline-deletelink\",\n            deleteText: options.deleteText,\n            emptyCssClass: \"empty-form\",\n            added: function(row) {\n                initPrepopulatedFields(row);\n                reinitDateTimeShortCuts();\n                updateSelectFilter();\n            },\n            addButton: options.addButton\n        });\n\n        return $rows;\n    };\n\n    // Stacked inlines ---------------------------------------------------------\n    $.fn.stackedFormset = function(selector, options) {\n        const $rows = $(this);\n        const updateInlineLabel = function(row) {\n            $(selector).find(\".inline_label\").each(function(i) {\n                const count = i + 1;\n                $(this).html($(this).html().replace(/(#\\d+)/g, \"#\" + count));\n            });\n        };\n\n        const reinitDateTimeShortCuts = function() {\n            // Reinitialize the calendar and clock widgets by force, yuck.\n            if (typeof DateTimeShortcuts !== \"undefined\") {\n                $(\".datetimeshortcuts\").remove();\n                DateTimeShortcuts.init();\n            }\n        };\n\n        const updateSelectFilter = function() {\n            // If any SelectFilter widgets were added, instantiate a new instance.\n            if (typeof SelectFilter !== \"undefined\") {\n                $(\".selectfilter\").each(function(index, value) {\n                    const namearr = value.name.split('-');\n                    SelectFilter.init(value.id, namearr[namearr.length - 1], false);\n                });\n                $(\".selectfilterstacked\").each(function(index, value) {\n                    const namearr = value.name.split('-');\n                    SelectFilter.init(value.id, namearr[namearr.length - 1], true);\n                });\n            }\n        };\n\n        const initPrepopulatedFields = function(row) {\n            row.find('.prepopulated_field').each(function() {\n                const field = $(this),\n                    input = field.find('input, select, textarea'),\n                    dependency_list = input.data('dependency_list') || [],\n                    dependencies = [];\n                $.each(dependency_list, function(i, field_name) {\n                    dependencies.push('#' + row.find('.form-row .field-' + field_name).find('input, select, textarea').attr('id'));\n                });\n                if (dependencies.length) {\n                    input.prepopulate(dependencies, input.attr('maxlength'));\n                }\n            });\n        };\n\n        $rows.formset({\n            prefix: options.prefix,\n            addText: options.addText,\n            formCssClass: \"dynamic-\" + options.prefix,\n            deleteCssClass: \"inline-deletelink\",\n            deleteText: options.deleteText,\n            emptyCssClass: \"empty-form\",\n            removed: updateInlineLabel,\n            added: function(row) {\n                initPrepopulatedFields(row);\n                reinitDateTimeShortCuts();\n                updateSelectFilter();\n                updateInlineLabel(row);\n            },\n            addButton: options.addButton\n        });\n\n        return $rows;\n    };\n\n    $(document).ready(function() {\n        $(\".js-inline-admin-formset\").each(function() {\n            const data = $(this).data(),\n                inlineOptions = data.inlineFormset;\n            let selector;\n            switch(data.inlineType) {\n            case \"stacked\":\n                selector = inlineOptions.name + \"-group .inline-related\";\n                $(selector).stackedFormset(selector, inlineOptions.options);\n                break;\n            case \"tabular\":\n                selector = inlineOptions.name + \"-group .tabular.inline-related tbody:first > tr.form-row\";\n                $(selector).tabularFormset(selector, inlineOptions.options);\n                break;\n            }\n        });\n    });\n}\n","inputSourceMap":null}