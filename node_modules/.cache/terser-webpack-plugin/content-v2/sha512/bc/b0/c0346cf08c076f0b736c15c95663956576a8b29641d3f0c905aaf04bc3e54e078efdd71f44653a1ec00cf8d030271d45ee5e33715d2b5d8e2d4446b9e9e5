{"code":"\"use strict\";{const e=django.jQuery;let t;e.fn.actions=function(n){const a=e.extend({},e.fn.actions.defaults,n),o=e(this);let s=!1;const c=function(){e(a.acrossClears).hide(),e(a.acrossQuestions).show(),e(a.allContainer).hide()},i=function(){e(a.acrossClears).show(),e(a.acrossQuestions).hide(),e(a.actionContainer).toggleClass(a.selectedClass),e(a.allContainer).show(),e(a.counterContainer).hide()},l=function(){e(a.acrossClears).hide(),e(a.acrossQuestions).hide(),e(a.allContainer).hide(),e(a.counterContainer).show()},r=function(){l(),e(a.acrossInput).val(0),e(a.actionContainer).removeClass(a.selectedClass)},u=function(t){t?c():l(),e(o).prop(\"checked\",t).parent().parent().toggleClass(a.selectedClass,t)},d=function(){const t=e(o).filter(\":checked\").length,n=e(\".action-counter\").data(\"actionsIcnt\");e(a.counterContainer).html(interpolate(ngettext(\"%(sel)s of %(cnt)s selected\",\"%(sel)s of %(cnt)s selected\",t),{sel:t,cnt:n},!0)),e(a.allToggle).prop(\"checked\",(function(){let e;return t===o.length?(e=!0,c()):(e=!1,r()),e}))};e(a.counterContainer).show(),e(this).filter(\":checked\").each((function(t){e(this).parent().parent().toggleClass(a.selectedClass),d(),1===e(a.acrossInput).val()&&i()})),e(a.allToggle).show().on(\"click\",(function(){u(e(this).prop(\"checked\")),d()})),e(\"a\",a.acrossQuestions).on(\"click\",(function(t){t.preventDefault(),e(a.acrossInput).val(1),i()})),e(\"a\",a.acrossClears).on(\"click\",(function(t){t.preventDefault(),e(a.allToggle).prop(\"checked\",!1),r(),u(0),d()})),t=null,e(o).on(\"click\",(function(n){n||(n=window.event);const s=n.target?n.target:n.srcElement;if(t&&e.data(t)!==e.data(s)&&!0===n.shiftKey){let n=!1;e(t).prop(\"checked\",s.checked).parent().parent().toggleClass(a.selectedClass,s.checked),e(o).each((function(){e.data(this)!==e.data(t)&&e.data(this)!==e.data(s)||(n=!n),n&&e(this).prop(\"checked\",s.checked).parent().parent().toggleClass(a.selectedClass,s.checked)}))}e(s).parent().parent().toggleClass(a.selectedClass,s.checked),t=s,d()})),e(\"form#changelist-form table#result_list tr\").on(\"change\",\"td:gt(0) :input\",(function(){s=!0})),e('form#changelist-form button[name=\"index\"]').on(\"click\",(function(e){if(s)return confirm(gettext(\"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"))})),e('form#changelist-form input[name=\"_save\"]').on(\"click\",(function(t){let n=!1;if(e(\"select option:selected\",a.actionContainer).each((function(){e(this).val()&&(n=!0)})),n)return s?confirm(gettext(\"You have selected an action, but you haven’t saved your changes to individual fields yet. Please click OK to save. You’ll need to re-run the action.\")):confirm(gettext(\"You have selected an action, and you haven’t made any changes on individual fields. You’re probably looking for the Go button rather than the Save button.\"))}))},e.fn.actions.defaults={actionContainer:\"div.actions\",counterContainer:\"span.action-counter\",allContainer:\"div.actions span.all\",acrossInput:\"div.actions input.select-across\",acrossQuestions:\"div.actions span.question\",acrossClears:\"div.actions span.clear\",allToggle:\"#action-toggle\",selectedClass:\"selected\"},e(document).ready((function(){const t=e(\"tr input.action-select\");t.length>0&&t.actions()}))}","name":"fabrikauth/admin/js/actions.js","input":"/*global gettext, interpolate, ngettext*/\n'use strict';\n{\n    const $ = django.jQuery;\n    let lastChecked;\n\n    $.fn.actions = function(opts) {\n        const options = $.extend({}, $.fn.actions.defaults, opts);\n        const actionCheckboxes = $(this);\n        let list_editable_changed = false;\n        const showQuestion = function() {\n                $(options.acrossClears).hide();\n                $(options.acrossQuestions).show();\n                $(options.allContainer).hide();\n            },\n            showClear = function() {\n                $(options.acrossClears).show();\n                $(options.acrossQuestions).hide();\n                $(options.actionContainer).toggleClass(options.selectedClass);\n                $(options.allContainer).show();\n                $(options.counterContainer).hide();\n            },\n            reset = function() {\n                $(options.acrossClears).hide();\n                $(options.acrossQuestions).hide();\n                $(options.allContainer).hide();\n                $(options.counterContainer).show();\n            },\n            clearAcross = function() {\n                reset();\n                $(options.acrossInput).val(0);\n                $(options.actionContainer).removeClass(options.selectedClass);\n            },\n            checker = function(checked) {\n                if (checked) {\n                    showQuestion();\n                } else {\n                    reset();\n                }\n                $(actionCheckboxes).prop(\"checked\", checked)\n                    .parent().parent().toggleClass(options.selectedClass, checked);\n            },\n            updateCounter = function() {\n                const sel = $(actionCheckboxes).filter(\":checked\").length;\n                // data-actions-icnt is defined in the generated HTML\n                // and contains the total amount of objects in the queryset\n                const actions_icnt = $('.action-counter').data('actionsIcnt');\n                $(options.counterContainer).html(interpolate(\n                    ngettext('%(sel)s of %(cnt)s selected', '%(sel)s of %(cnt)s selected', sel), {\n                        sel: sel,\n                        cnt: actions_icnt\n                    }, true));\n                $(options.allToggle).prop(\"checked\", function() {\n                    let value;\n                    if (sel === actionCheckboxes.length) {\n                        value = true;\n                        showQuestion();\n                    } else {\n                        value = false;\n                        clearAcross();\n                    }\n                    return value;\n                });\n            };\n        // Show counter by default\n        $(options.counterContainer).show();\n        // Check state of checkboxes and reinit state if needed\n        $(this).filter(\":checked\").each(function(i) {\n            $(this).parent().parent().toggleClass(options.selectedClass);\n            updateCounter();\n            if ($(options.acrossInput).val() === 1) {\n                showClear();\n            }\n        });\n        $(options.allToggle).show().on('click', function() {\n            checker($(this).prop(\"checked\"));\n            updateCounter();\n        });\n        $(\"a\", options.acrossQuestions).on('click', function(event) {\n            event.preventDefault();\n            $(options.acrossInput).val(1);\n            showClear();\n        });\n        $(\"a\", options.acrossClears).on('click', function(event) {\n            event.preventDefault();\n            $(options.allToggle).prop(\"checked\", false);\n            clearAcross();\n            checker(0);\n            updateCounter();\n        });\n        lastChecked = null;\n        $(actionCheckboxes).on('click', function(event) {\n            if (!event) { event = window.event; }\n            const target = event.target ? event.target : event.srcElement;\n            if (lastChecked && $.data(lastChecked) !== $.data(target) && event.shiftKey === true) {\n                let inrange = false;\n                $(lastChecked).prop(\"checked\", target.checked)\n                    .parent().parent().toggleClass(options.selectedClass, target.checked);\n                $(actionCheckboxes).each(function() {\n                    if ($.data(this) === $.data(lastChecked) || $.data(this) === $.data(target)) {\n                        inrange = (inrange) ? false : true;\n                    }\n                    if (inrange) {\n                        $(this).prop(\"checked\", target.checked)\n                            .parent().parent().toggleClass(options.selectedClass, target.checked);\n                    }\n                });\n            }\n            $(target).parent().parent().toggleClass(options.selectedClass, target.checked);\n            lastChecked = target;\n            updateCounter();\n        });\n        $('form#changelist-form table#result_list tr').on('change', 'td:gt(0) :input', function() {\n            list_editable_changed = true;\n        });\n        $('form#changelist-form button[name=\"index\"]').on('click', function(event) {\n            if (list_editable_changed) {\n                return confirm(gettext(\"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"));\n            }\n        });\n        $('form#changelist-form input[name=\"_save\"]').on('click', function(event) {\n            let action_changed = false;\n            $('select option:selected', options.actionContainer).each(function() {\n                if ($(this).val()) {\n                    action_changed = true;\n                }\n            });\n            if (action_changed) {\n                if (list_editable_changed) {\n                    return confirm(gettext(\"You have selected an action, but you haven’t saved your changes to individual fields yet. Please click OK to save. You’ll need to re-run the action.\"));\n                } else {\n                    return confirm(gettext(\"You have selected an action, and you haven’t made any changes on individual fields. You’re probably looking for the Go button rather than the Save button.\"));\n                }\n            }\n        });\n    };\n    /* Setup plugin defaults */\n    $.fn.actions.defaults = {\n        actionContainer: \"div.actions\",\n        counterContainer: \"span.action-counter\",\n        allContainer: \"div.actions span.all\",\n        acrossInput: \"div.actions input.select-across\",\n        acrossQuestions: \"div.actions span.question\",\n        acrossClears: \"div.actions span.clear\",\n        allToggle: \"#action-toggle\",\n        selectedClass: \"selected\"\n    };\n    $(document).ready(function() {\n        const $actionsEls = $('tr input.action-select');\n        if ($actionsEls.length > 0) {\n            $actionsEls.actions();\n        }\n    });\n}\n","inputSourceMap":null}